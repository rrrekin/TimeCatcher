name: Version Bump

'on':
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [main]

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  version-bump:
    # Only run when CI workflow succeeded and it's not a version bump PR
    if: github.event.workflow_run.conclusion == 'success' && 
      github.event.workflow_run.event == 'push' &&
      !startsWith(github.event.workflow_run.head_branch, 'version-bump-')
    runs-on: ubuntu-latest
    timeout-minutes: 5

    # Prevent concurrent version bumps to avoid conflicts
    concurrency:
      group: version-bump-main
      cancel-in-progress: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for proper git operations
          fetch-depth: 0
          # Use the base branch
          ref: main
          # Use GitHub token with write permissions
          token: ${{ secrets.GH_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get PR information from workflow run
        id: pr-info
        run: |
          # Get PR information from the workflow run that triggered this
          PR_DATA=$(gh api repos/${{ github.repository }}/pulls \
            --jq ".[] | select(.merge_commit_sha == \"${{ github.event.workflow_run.head_sha }}\") | {number, title}")
          
          if [ "$PR_DATA" = "null" ] || [ -z "$PR_DATA" ]; then
            echo "No merged PR found for commit ${{ github.event.workflow_run.head_sha }}"
            exit 1
          fi
          
          PR_NUMBER=$(echo "$PR_DATA" | jq -r '.number')
          PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          
      - name: Determine version bump type
        id: bump-type
        env:
          PR_TITLE: ${{ steps.pr-info.outputs.pr_title }}
          PR_NUMBER: ${{ steps.pr-info.outputs.pr_number }}
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          # Enable strict shell error handling
          set -euo pipefail
          IFS=$'\n\t'

          # Set up cleanup trap to restore shell state
          cleanup() {
            shopt -u nocasematch 2>/dev/null || true
          }
          trap cleanup EXIT

          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT

          # Enable case-insensitive pattern matching
          shopt -s nocasematch

          # Determine bump type from PR title with anchored, grouped patterns
          # MAJOR: Explicit tags, breaking change indicators, or conventional commit breaking patterns
          if [[ "$PR_TITLE" =~ (\[major\]|^major:|^.*!:.*|breaking[[:space:]]change) ]]; then
            BUMP_TYPE="major"
            echo "üöÄ Detected MAJOR version bump from PR title"
          elif [[ "$PR_TITLE" =~ (\[minor\]|^minor:) ]]; then
            BUMP_TYPE="minor"
            echo "üìà Detected MINOR version bump from PR title"
          else
            BUMP_TYPE="patch"
            echo "üîß Default PATCH version bump"
          fi

          # Export bump type to GitHub output
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Bump version
        env:
          BUMP_TYPE: ${{ steps.bump-type.outputs.bump_type }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ steps.bump-type.outputs.pr_title }}
        run: |
          echo "üìà Bumping ${BUMP_TYPE} version..."

          # Create temporary commit message file to avoid shell injection
          COMMIT_FILE=$(mktemp)

          # Write commit message to file with proper escaping
          cat > "$COMMIT_FILE" << EOF
          chore: bump ${BUMP_TYPE} version

          Merged PR #${PR_NUMBER}: ${PR_TITLE}

          ü§ñ Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>
          EOF

          # Read commit message from file safely and pass to script
          COMMIT_MSG=$(cat "$COMMIT_FILE")
          node scripts/bump-version.js "${BUMP_TYPE}" "$COMMIT_MSG"

          # Clean up temporary file
          rm -f "$COMMIT_FILE"

      - name: Get new version info
        id: version-info
        run: |
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "üìä New version: $NEW_VERSION"

      - name: Create version bump branch and PR
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          NEW_VERSION: ${{ steps.version-info.outputs.new_version }}
          BUMP_TYPE: ${{ steps.bump-type.outputs.bump_type }}
        run: |
          echo "üì§ Creating version bump branch and PR..."

          # Create and switch to version bump branch (idempotent)
          BRANCH_NAME="version-bump-$NEW_VERSION"
          git checkout -B "$BRANCH_NAME"

          # Push the branch with force-with-lease and set upstream
          git push --force-with-lease --set-upstream origin "$BRANCH_NAME"

          # Create PR with auto-merge
          gh pr create \
            --title "chore: bump $BUMP_TYPE version to $NEW_VERSION" \
            --body "Automated version bump from merged PR #${{ steps.pr-info.outputs.pr_number }}" \
            --base main \
            --head "$BRANCH_NAME"

          # Merge PR immediately with head commit verification
          HEAD_SHA=$(git rev-parse HEAD)
          PR_NUMBER=$(gh pr view "$BRANCH_NAME" --json number -q .number)
          gh pr merge "$PR_NUMBER" --admin --squash --delete-branch --match-head-commit "$HEAD_SHA"

          echo "‚úÖ Created PR for version $NEW_VERSION"

      - name: Summary
        run: |
          echo "üéâ Version bump completed!"
          echo "   ‚Ä¢ Original PR: #${{ steps.pr-info.outputs.pr_number }}"
          echo "   ‚Ä¢ Bump type: ${{ steps.bump-type.outputs.bump_type }}"
          echo "   ‚Ä¢ New version: ${{ steps.version-info.outputs.new_version }}"
          echo ""
          echo "üìù Git tags will be created manually during release process."
