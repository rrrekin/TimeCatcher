name: Version Bump

'on':
  workflow_run:
    workflows: ['CI']
    types: [completed]
    branches: [main]

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  version-bump:
    # Only run when CI workflow succeeded and it's not a version bump branch
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'push' &&
      !startsWith(github.event.workflow_run.head_branch, 'version-bump-')
    runs-on: ubuntu-latest
    timeout-minutes: 5

    # Prevent concurrent version bumps to avoid conflicts
    concurrency:
      group: version-bump-main
      cancel-in-progress: false

    steps:
      - name: Check if commit is a version bump
        id: commit-guard
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          echo "Checking commit message for: $COMMIT_SHA"

          # Get commit message using GitHub API
          COMMIT_MESSAGE=$(gh api repos/${{ github.repository }}/commits/$COMMIT_SHA --jq '.commit.message')
          echo "Commit message: $COMMIT_MESSAGE"

          # Check if this is a version bump commit
          if [[ "$COMMIT_MESSAGE" == "chore: bump "* ]]; then
            echo "This is a version bump commit, skipping workflow"
            echo "should_skip=true" >> $GITHUB_OUTPUT
          else
            echo "This is not a version bump commit, proceeding"
            echo "should_skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        if: steps.commit-guard.outputs.should_skip != 'true'
        uses: actions/checkout@v4
        with:
          # Fetch full history for proper git operations
          fetch-depth: 0
          # Use the base branch
          ref: main
          # Use GitHub token with write permissions
          token: ${{ secrets.GH_PAT }}

      - name: Setup Node.js
        if: steps.commit-guard.outputs.should_skip != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Configure Git
        if: steps.commit-guard.outputs.should_skip != 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Find original PR for bump type detection
        if: steps.commit-guard.outputs.should_skip != 'true'
        id: find-pr
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          echo "Looking for PR associated with commit: $COMMIT_SHA"

          # Try direct commit-to-pulls API endpoint first
          PR_INFO=$(gh api repos/${{ github.repository }}/commits/$COMMIT_SHA/pulls \
            --jq ".[0] | select(. != null) | {number, title}")

          # If direct API fails, fall back to search method
          if [ -z "$PR_INFO" ] || [ "$PR_INFO" = "null" ]; then
            echo "Direct API returned no results, trying fallback search..."
            SINCE_DATE=$(date -u -d '24 hours ago' '+%Y-%m-%dT%H:%M:%SZ')
            
            PR_INFO=$(gh api repos/${{ github.repository }}/pulls \
              --method GET \
              --field state=closed \
              --field sort=updated \
              --field direction=desc \
              --field per_page=20 \
              --jq ".[] | select(.merged_at != null and .merged_at > \"$SINCE_DATE\") | select(.merge_commit_sha == \"$COMMIT_SHA\" or .head.sha == \"$COMMIT_SHA\") | {number, title} | select(.number != null)" \
              | head -1)
          fi

          if [ -z "$PR_INFO" ] || [ "$PR_INFO" = "null" ]; then
            echo "No PR found for commit $COMMIT_SHA"
            echo "Will use default patch version bump"
            echo "pr_found=false" >> $GITHUB_OUTPUT
            echo "pr_title=" >> $GITHUB_OUTPUT
          else
            PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
            PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')
            echo "Found PR #$PR_NUMBER: $PR_TITLE"
            echo "pr_found=true" >> $GITHUB_OUTPUT
            echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          fi

      - name: Determine version bump type
        if: steps.commit-guard.outputs.should_skip != 'true'
        id: bump-type
        env:
          PR_FOUND: ${{ steps.find-pr.outputs.pr_found }}
          PR_TITLE: ${{ steps.find-pr.outputs.pr_title }}
        run: |
          # Enable strict shell error handling
          set -euo pipefail
          IFS=$'\n\t'

          # Set up cleanup trap to restore shell state
          cleanup() {
            shopt -u nocasematch 2>/dev/null || true
          }
          trap cleanup EXIT

          if [ "$PR_FOUND" = "true" ] && [ ! -z "$PR_TITLE" ]; then
            echo "Analyzing PR title for version bump type: $PR_TITLE"
            
            # Enable case-insensitive pattern matching
            shopt -s nocasematch
            
            # Parse conventional commit format from PR title
            if [[ "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore)(\([^)]+\))?!?:[[:space:]]* ]]; then
              TYPE="${BASH_REMATCH[1]}"

              # Check for breaking change indicators
              if [[ "$PR_TITLE" =~ ^[^:]*(\([^)]+\))?!: ]] || [[ "$PR_TITLE" =~ BREAKING[[:space:]]CHANGE ]]; then
                BUMP_TYPE="major"
                echo "💥 Detected MAJOR version bump (breaking change) from conventional commit: $TYPE"
              elif [[ "$TYPE" == "feat" ]]; then
                BUMP_TYPE="minor"
                echo "✨ Detected MINOR version bump from conventional commit: $TYPE (feature)"
              else
                BUMP_TYPE="patch"
                echo "🔧 Detected PATCH version bump from conventional commit: $TYPE"
              fi
            else
              BUMP_TYPE="patch"
              echo "🔧 Default PATCH version bump (no conventional commit format detected)"
            fi
          else
            BUMP_TYPE="patch"
            echo "🔧 Default PATCH version bump (no PR found or analyzed)"
          fi

          # Export bump type to GitHub output
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Bump version
        if: steps.commit-guard.outputs.should_skip != 'true'
        env:
          BUMP_TYPE: ${{ steps.bump-type.outputs.bump_type }}
          COMMIT_SHA: ${{ github.event.workflow_run.head_sha }}
          PR_FOUND: ${{ steps.find-pr.outputs.pr_found }}
          PR_NUMBER: ${{ steps.find-pr.outputs.pr_number }}
          PR_TITLE: ${{ steps.find-pr.outputs.pr_title }}
        run: |
          echo "📈 Bumping ${BUMP_TYPE} version..."

          # Create temporary commit message file to avoid shell injection
          COMMIT_FILE=$(mktemp)

          # Write commit message to file with proper escaping
          if [ "$PR_FOUND" = "true" ]; then
            cat > "$COMMIT_FILE" << EOF
          chore: bump ${BUMP_TYPE} version

          Automated version bump from merged PR #${PR_NUMBER}: ${PR_TITLE}
          EOF
          else
            cat > "$COMMIT_FILE" << EOF
          chore: bump ${BUMP_TYPE} version

          Automated version bump after successful CI for commit ${COMMIT_SHA}
          EOF
          fi

          # Read commit message from file safely and pass to script
          COMMIT_MSG=$(cat "$COMMIT_FILE")
          node scripts/bump-version.js "${BUMP_TYPE}" "$COMMIT_MSG"

          # Clean up temporary file
          rm -f "$COMMIT_FILE"

      - name: Get new version info
        if: steps.commit-guard.outputs.should_skip != 'true'
        id: version-info
        run: |
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "📊 New version: $NEW_VERSION"

      - name: Create version bump branch and PR
        if: steps.commit-guard.outputs.should_skip != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          NEW_VERSION: ${{ steps.version-info.outputs.new_version }}
          BUMP_TYPE: ${{ steps.bump-type.outputs.bump_type }}
        run: |
          echo "📤 Creating version bump branch and PR..."

          # Create and switch to version bump branch (idempotent)
          BRANCH_NAME="version-bump-$NEW_VERSION"
          git checkout -B "$BRANCH_NAME"

          # Push the branch with force-with-lease and set upstream
          git push --force-with-lease --set-upstream origin "$BRANCH_NAME"

          # Create PR with contextual body
          if [ "${{ steps.find-pr.outputs.pr_found }}" = "true" ]; then
            PR_BODY="Automated version bump from merged PR #${{ steps.find-pr.outputs.pr_number }}"
          else
            PR_BODY="Automated version bump after successful CI for commit ${{ github.event.workflow_run.head_sha }}"
          fi

          gh pr create \
            --title "chore: bump $BUMP_TYPE version to $NEW_VERSION" \
            --body "$PR_BODY" \
            --base main \
            --head "$BRANCH_NAME"

          # Merge PR immediately with head commit verification
          HEAD_SHA=$(git rev-parse HEAD)
          PR_NUMBER=$(gh pr view "$BRANCH_NAME" --json number -q .number)
          gh pr merge "$PR_NUMBER" --admin --squash --delete-branch --match-head-commit "$HEAD_SHA"

          echo "✅ Created PR for version $NEW_VERSION"

      - name: Summary
        if: steps.commit-guard.outputs.should_skip != 'true'
        run: |
          echo "🎉 Version bump completed!"
          if [ "${{ steps.find-pr.outputs.pr_found }}" = "true" ]; then
            echo "   • Original PR: #${{ steps.find-pr.outputs.pr_number }}"
            echo "   • PR Title: ${{ steps.find-pr.outputs.pr_title }}"
          else
            echo "   • Trigger commit: ${{ github.event.workflow_run.head_sha }}"
          fi
          echo "   • Bump type: ${{ steps.bump-type.outputs.bump_type }}"
          echo "   • New version: ${{ steps.version-info.outputs.new_version }}"
          echo ""
          echo "📝 Git tags will be created manually during release process."
