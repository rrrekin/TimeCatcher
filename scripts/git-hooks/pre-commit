#!/bin/sh

# Pre-commit hook to format markdown files and source code
# This script is shared in the repository and can be installed via: npm run install-hooks

# Get list of staged files (NUL-delimited for safe handling of filenames with spaces)
staged_md_files=$(git diff --cached --name-only -z --diff-filter=ACM | grep -zZ '\.md$' | grep -vzZ node_modules || true)
staged_src_files=$(git diff --cached --name-only -z --diff-filter=ACM | grep -zZE '\.(ts|js|vue|json|html|css|scss|yaml|yml)$' | grep -vzZ node_modules || true)

# Check if any files need processing
if [ -z "$staged_md_files" ] && [ -z "$staged_src_files" ]; then
  # No files staged for formatting, exit successfully
  exit 0
fi

echo "🔍 Checking files for formatting issues..."

# Process markdown files if any are staged
if [ -n "$staged_md_files" ]; then
  # Check if markdownlint-cli2 is available
  if ! npm list markdownlint-cli2 >/dev/null 2>&1; then
    echo "⚠️  markdownlint-cli2 not found. Run 'npm install' to install dependencies."
    echo "⚠️  Skipping markdown formatting check."
  else
    # Run markdownlint-cli2 on staged files only
    echo "📝 Running markdownlint on staged files: $staged_md_files"

    # Create temporary file list for staged files (NUL-delimited)
    temp_file=$(mktemp)
    printf '%s' "$staged_md_files" > "$temp_file"

    # Run markdownlint with fix on the specific files (using NUL-delimited input)
    if cat "$temp_file" | xargs -0 npx markdownlint-cli2 --config .markdownlint-cli2.jsonc; then
      echo "✅ Markdown formatting complete"
      
      # Add any fixed files back to the staging area (handle NUL-delimited filenames)
      printf '%s' "$staged_md_files" | while IFS= read -r -d '' file; do
        if [ -f "$file" ]; then
          git add "$file"
        fi
      done
      
      # Clean up
      rm -f "$temp_file"
    else
      echo "❌ Markdown formatting failed"
      echo "💡 Fix the issues above or run 'npm run format:md' to auto-fix what's possible"
      rm -f "$temp_file"
      exit 1
    fi
  fi
fi

# Process source files if any are staged
if [ -n "$staged_src_files" ]; then
  # Check if prettier is available
  if ! npm list prettier >/dev/null 2>&1; then
    echo "⚠️  Prettier not found. Run 'npm install' to install dependencies."
    echo "⚠️  Skipping code formatting check."
  else
    echo "🎨 Running Prettier on staged files: $staged_src_files"
    
    # Run prettier on staged files (using NUL-delimited input for safe filename handling)
    if printf '%s' "$staged_src_files" | xargs -0 npx prettier --write; then
      echo "✅ Code formatting complete"
      
      # Add any formatted files back to the staging area (handle NUL-delimited filenames)
      printf '%s' "$staged_src_files" | while IFS= read -r -d '' file; do
        if [ -f "$file" ]; then
          git add "$file"
        fi
      done
    else
      echo "❌ Code formatting failed"
      echo "💡 Fix the issues above or run 'npm run format' to format all files"
      exit 1
    fi
  fi
fi

echo "🎉 All formatting checks passed!"
exit 0
